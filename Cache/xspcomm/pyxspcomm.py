# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyxspcomm
else:
    import _pyxspcomm

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref


def free_third_call():
    return _pyxspcomm.free_third_call()

def init_third_call():
    return _pyxspcomm.init_third_call()

def get_function_id(function_name):
    return _pyxspcomm.get_function_id(function_name)

def call_third_function(id, args, argc, ret, retc):
    return _pyxspcomm.call_third_function(id, args, argc, ret, retc)

def test_third_call():
    return _pyxspcomm.test_third_call()
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyxspcomm.delete_SwigPyIterator

    def value(self):
        return _pyxspcomm.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyxspcomm.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyxspcomm.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyxspcomm.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyxspcomm.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyxspcomm.SwigPyIterator_copy(self)

    def next(self):
        return _pyxspcomm.SwigPyIterator_next(self)

    def __next__(self):
        return _pyxspcomm.SwigPyIterator___next__(self)

    def previous(self):
        return _pyxspcomm.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyxspcomm.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyxspcomm.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyxspcomm.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyxspcomm.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyxspcomm.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyxspcomm.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyxspcomm.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pyxspcomm:
_pyxspcomm.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _pyxspcomm.SHARED_PTR_DISOWN
class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyxspcomm.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyxspcomm.StringVector___nonzero__(self)

    def __bool__(self):
        return _pyxspcomm.StringVector___bool__(self)

    def __len__(self):
        return _pyxspcomm.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _pyxspcomm.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyxspcomm.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyxspcomm.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyxspcomm.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyxspcomm.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyxspcomm.StringVector___setitem__(self, *args)

    def pop(self):
        return _pyxspcomm.StringVector_pop(self)

    def append(self, x):
        return _pyxspcomm.StringVector_append(self, x)

    def empty(self):
        return _pyxspcomm.StringVector_empty(self)

    def size(self):
        return _pyxspcomm.StringVector_size(self)

    def swap(self, v):
        return _pyxspcomm.StringVector_swap(self, v)

    def begin(self):
        return _pyxspcomm.StringVector_begin(self)

    def end(self):
        return _pyxspcomm.StringVector_end(self)

    def rbegin(self):
        return _pyxspcomm.StringVector_rbegin(self)

    def rend(self):
        return _pyxspcomm.StringVector_rend(self)

    def clear(self):
        return _pyxspcomm.StringVector_clear(self)

    def get_allocator(self):
        return _pyxspcomm.StringVector_get_allocator(self)

    def pop_back(self):
        return _pyxspcomm.StringVector_pop_back(self)

    def erase(self, *args):
        return _pyxspcomm.StringVector_erase(self, *args)

    def __init__(self, *args):
        _pyxspcomm.StringVector_swiginit(self, _pyxspcomm.new_StringVector(*args))

    def push_back(self, x):
        return _pyxspcomm.StringVector_push_back(self, x)

    def front(self):
        return _pyxspcomm.StringVector_front(self)

    def back(self):
        return _pyxspcomm.StringVector_back(self)

    def assign(self, n, x):
        return _pyxspcomm.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _pyxspcomm.StringVector_resize(self, *args)

    def insert(self, *args):
        return _pyxspcomm.StringVector_insert(self, *args)

    def reserve(self, n):
        return _pyxspcomm.StringVector_reserve(self, n)

    def capacity(self):
        return _pyxspcomm.StringVector_capacity(self)
    __swig_destroy__ = _pyxspcomm.delete_StringVector

# Register StringVector in _pyxspcomm:
_pyxspcomm.StringVector_swigregister(StringVector)
class XDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyxspcomm.XDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyxspcomm.XDataVector___nonzero__(self)

    def __bool__(self):
        return _pyxspcomm.XDataVector___bool__(self)

    def __len__(self):
        return _pyxspcomm.XDataVector___len__(self)

    def __getslice__(self, i, j):
        return _pyxspcomm.XDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyxspcomm.XDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyxspcomm.XDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyxspcomm.XDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyxspcomm.XDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyxspcomm.XDataVector___setitem__(self, *args)

    def pop(self):
        return _pyxspcomm.XDataVector_pop(self)

    def append(self, x):
        return _pyxspcomm.XDataVector_append(self, x)

    def empty(self):
        return _pyxspcomm.XDataVector_empty(self)

    def size(self):
        return _pyxspcomm.XDataVector_size(self)

    def swap(self, v):
        return _pyxspcomm.XDataVector_swap(self, v)

    def begin(self):
        return _pyxspcomm.XDataVector_begin(self)

    def end(self):
        return _pyxspcomm.XDataVector_end(self)

    def rbegin(self):
        return _pyxspcomm.XDataVector_rbegin(self)

    def rend(self):
        return _pyxspcomm.XDataVector_rend(self)

    def clear(self):
        return _pyxspcomm.XDataVector_clear(self)

    def get_allocator(self):
        return _pyxspcomm.XDataVector_get_allocator(self)

    def pop_back(self):
        return _pyxspcomm.XDataVector_pop_back(self)

    def erase(self, *args):
        return _pyxspcomm.XDataVector_erase(self, *args)

    def __init__(self, *args):
        _pyxspcomm.XDataVector_swiginit(self, _pyxspcomm.new_XDataVector(*args))

    def push_back(self, x):
        return _pyxspcomm.XDataVector_push_back(self, x)

    def front(self):
        return _pyxspcomm.XDataVector_front(self)

    def back(self):
        return _pyxspcomm.XDataVector_back(self)

    def assign(self, n, x):
        return _pyxspcomm.XDataVector_assign(self, n, x)

    def resize(self, *args):
        return _pyxspcomm.XDataVector_resize(self, *args)

    def insert(self, *args):
        return _pyxspcomm.XDataVector_insert(self, *args)

    def reserve(self, n):
        return _pyxspcomm.XDataVector_reserve(self, n)

    def capacity(self):
        return _pyxspcomm.XDataVector_capacity(self)
    __swig_destroy__ = _pyxspcomm.delete_XDataVector

# Register XDataVector in _pyxspcomm:
_pyxspcomm.XDataVector_swigregister(XDataVector)
class DictStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pyxspcomm.DictStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyxspcomm.DictStrBool___nonzero__(self)

    def __bool__(self):
        return _pyxspcomm.DictStrBool___bool__(self)

    def __len__(self):
        return _pyxspcomm.DictStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _pyxspcomm.DictStrBool___getitem__(self, key)

    def __delitem__(self, key):
        return _pyxspcomm.DictStrBool___delitem__(self, key)

    def has_key(self, key):
        return _pyxspcomm.DictStrBool_has_key(self, key)

    def keys(self):
        return _pyxspcomm.DictStrBool_keys(self)

    def values(self):
        return _pyxspcomm.DictStrBool_values(self)

    def items(self):
        return _pyxspcomm.DictStrBool_items(self)

    def __contains__(self, key):
        return _pyxspcomm.DictStrBool___contains__(self, key)

    def key_iterator(self):
        return _pyxspcomm.DictStrBool_key_iterator(self)

    def value_iterator(self):
        return _pyxspcomm.DictStrBool_value_iterator(self)

    def __setitem__(self, *args):
        return _pyxspcomm.DictStrBool___setitem__(self, *args)

    def asdict(self):
        return _pyxspcomm.DictStrBool_asdict(self)

    def __init__(self, *args):
        _pyxspcomm.DictStrBool_swiginit(self, _pyxspcomm.new_DictStrBool(*args))

    def empty(self):
        return _pyxspcomm.DictStrBool_empty(self)

    def size(self):
        return _pyxspcomm.DictStrBool_size(self)

    def swap(self, v):
        return _pyxspcomm.DictStrBool_swap(self, v)

    def begin(self):
        return _pyxspcomm.DictStrBool_begin(self)

    def end(self):
        return _pyxspcomm.DictStrBool_end(self)

    def rbegin(self):
        return _pyxspcomm.DictStrBool_rbegin(self)

    def rend(self):
        return _pyxspcomm.DictStrBool_rend(self)

    def clear(self):
        return _pyxspcomm.DictStrBool_clear(self)

    def get_allocator(self):
        return _pyxspcomm.DictStrBool_get_allocator(self)

    def count(self, x):
        return _pyxspcomm.DictStrBool_count(self, x)

    def erase(self, *args):
        return _pyxspcomm.DictStrBool_erase(self, *args)

    def find(self, x):
        return _pyxspcomm.DictStrBool_find(self, x)

    def lower_bound(self, x):
        return _pyxspcomm.DictStrBool_lower_bound(self, x)

    def upper_bound(self, x):
        return _pyxspcomm.DictStrBool_upper_bound(self, x)
    __swig_destroy__ = _pyxspcomm.delete_DictStrBool

# Register DictStrBool in _pyxspcomm:
_pyxspcomm.DictStrBool_swigregister(DictStrBool)

def TEST_get_u64_step_func():
    return _pyxspcomm.TEST_get_u64_step_func()

def TEST_get_u64_ris_fal_cblback_func():
    return _pyxspcomm.TEST_get_u64_ris_fal_cblback_func()
class XStep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, clk, step=1):
        _pyxspcomm.XStep_swiginit(self, _pyxspcomm.new_XStep(clk, step))
    __swig_destroy__ = _pyxspcomm.delete_XStep

# Register XStep in _pyxspcomm:
_pyxspcomm.XStep_swigregister(XStep)
class XClockCallBack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    desc = property(_pyxspcomm.XClockCallBack_desc_get, _pyxspcomm.XClockCallBack_desc_set)
    func = property(_pyxspcomm.XClockCallBack_func_get, _pyxspcomm.XClockCallBack_func_set)
    args = property(_pyxspcomm.XClockCallBack_args_get, _pyxspcomm.XClockCallBack_args_set)

    def __init__(self):
        _pyxspcomm.XClockCallBack_swiginit(self, _pyxspcomm.new_XClockCallBack())
    __swig_destroy__ = _pyxspcomm.delete_XClockCallBack

# Register XClockCallBack in _pyxspcomm:
_pyxspcomm.XClockCallBack_swigregister(XClockCallBack)
class XClock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    clock_pins = property(_pyxspcomm.XClock_clock_pins_get, _pyxspcomm.XClock_clock_pins_set)
    ports = property(_pyxspcomm.XClock_ports_get, _pyxspcomm.XClock_ports_set)
    div_clk = property(_pyxspcomm.XClock_div_clk_get, _pyxspcomm.XClock_div_clk_set)
    clk = property(_pyxspcomm.XClock_clk_get, _pyxspcomm.XClock_clk_set)
    stop_on_rise = property(_pyxspcomm.XClock_stop_on_rise_get, _pyxspcomm.XClock_stop_on_rise_set)

    def default_stop_on_rise(self, rise):
        return _pyxspcomm.XClock_default_stop_on_rise(self, rise)

    def __init__(self, *args):
        _pyxspcomm.XClock_swiginit(self, _pyxspcomm.new_XClock(*args))

    def ReInit(self, *args):
        return _pyxspcomm.XClock_ReInit(self, *args)

    def Add(self, *args):
        return _pyxspcomm.XClock_Add(self, *args)

    def AddPin(self, *args):
        return _pyxspcomm.XClock_AddPin(self, *args)

    def RefreshComb(self):
        return _pyxspcomm.XClock_RefreshComb(self)

    def RefreshCombT(self):
        return _pyxspcomm.XClock_RefreshCombT(self)

    def Step(self, s=1):
        return _pyxspcomm.XClock_Step(self, s)

    def Reset(self):
        return _pyxspcomm.XClock_Reset(self)

    def StepRis(self, *args):
        return _pyxspcomm.XClock_StepRis(self, *args)

    def StepFal(self, *args):
        return _pyxspcomm.XClock_StepFal(self, *args)

    def RemoveStepRisCbByDesc(self, desc):
        return _pyxspcomm.XClock_RemoveStepRisCbByDesc(self, desc)

    def RemoveStepRisCbByFunc(self, func):
        return _pyxspcomm.XClock_RemoveStepRisCbByFunc(self, func)

    def RemoveStepRisCb(self, func, desc):
        return _pyxspcomm.XClock_RemoveStepRisCb(self, func, desc)

    def RemoveStepFalCbByDesc(self, desc):
        return _pyxspcomm.XClock_RemoveStepFalCbByDesc(self, desc)

    def RemoveStepFalCbByFunc(self, func):
        return _pyxspcomm.XClock_RemoveStepFalCbByFunc(self, func)

    def RemoveStepFalCb(self, func, desc):
        return _pyxspcomm.XClock_RemoveStepFalCb(self, func, desc)

    def ListSteRisCbDesc(self):
        return _pyxspcomm.XClock_ListSteRisCbDesc(self)

    def ListSteFalCbDesc(self):
        return _pyxspcomm.XClock_ListSteFalCbDesc(self)

    def StepRisQueueSize(self):
        return _pyxspcomm.XClock_StepRisQueueSize(self)

    def StepFalQueueSize(self):
        return _pyxspcomm.XClock_StepFalQueueSize(self)

    def FreqDivWith(self, *args):
        return _pyxspcomm.XClock_FreqDivWith(self, *args)

    def FreqDivDelete(self, *args):
        return _pyxspcomm.XClock_FreqDivDelete(self, *args)

    def ClearRisCallBacks(self):
        return _pyxspcomm.XClock_ClearRisCallBacks(self)

    def ClearFalCallBacks(self):
        return _pyxspcomm.XClock_ClearFalCallBacks(self)

    def SetFastMode(self, level):
        return _pyxspcomm.XClock_SetFastMode(self, level)

    def GetFastMode(self):
        return _pyxspcomm.XClock_GetFastMode(self)

    def IsDisable(self):
        return _pyxspcomm.XClock_IsDisable(self)

    def Disable(self):
        return _pyxspcomm.XClock_Disable(self)

    def Enable(self):
        return _pyxspcomm.XClock_Enable(self)

    def CSelf(self):
        return _pyxspcomm.XClock_CSelf(self)

    def _fal_pins(self):
        return _pyxspcomm.XClock__fal_pins(self)

    def _fal_ports(self):
        return _pyxspcomm.XClock__fal_ports(self)

    def _fal_refresh(self):
        return _pyxspcomm.XClock__fal_refresh(self)

    def _ris_pins(self):
        return _pyxspcomm.XClock__ris_pins(self)

    def _ris_ports(self):
        return _pyxspcomm.XClock__ris_ports(self)

    def _ris_refresh(self):
        return _pyxspcomm.XClock__ris_refresh(self)

    def _remove_step_cb_by(self, type, group, desc, func=0):
        return _pyxspcomm.XClock__remove_step_cb_by(self, type, group, desc, func)

    def _get_div_clk_ris(self, cycle, rise):
        return _pyxspcomm.XClock__get_div_clk_ris(self, cycle, rise)

    def _get_div_clk_fal(self, cycle, rise):
        return _pyxspcomm.XClock__get_div_clk_fal(self, cycle, rise)

    def eval(self):
        return _pyxspcomm.XClock_eval(self)

    def eval_t(self):
        return _pyxspcomm.XClock_eval_t(self)

    def _step_fal(self):
        return _pyxspcomm.XClock__step_fal(self)

    def _step_ris(self):
        return _pyxspcomm.XClock__step_ris(self)

    def RunStep(self, s=1):
        return _pyxspcomm.XClock_RunStep(self, s)
    __swig_destroy__ = _pyxspcomm.delete_XClock

# Register XClock in _pyxspcomm:
_pyxspcomm.XClock_swigregister(XClock)
class xsvLogicVecVal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    aval = property(_pyxspcomm.xsvLogicVecVal_aval_get, _pyxspcomm.xsvLogicVecVal_aval_set)
    bval = property(_pyxspcomm.xsvLogicVecVal_bval_get, _pyxspcomm.xsvLogicVecVal_bval_set)

    def __init__(self):
        _pyxspcomm.xsvLogicVecVal_swiginit(self, _pyxspcomm.new_xsvLogicVecVal())
    __swig_destroy__ = _pyxspcomm.delete_xsvLogicVecVal

# Register xsvLogicVecVal in _pyxspcomm:
_pyxspcomm.xsvLogicVecVal_swigregister(xsvLogicVecVal)

def TEST_DPI_LR(v):
    return _pyxspcomm.TEST_DPI_LR(v)

def TEST_DPI_LW(v):
    return _pyxspcomm.TEST_DPI_LW(v)

def TEST_DPI_VR(v):
    return _pyxspcomm.TEST_DPI_VR(v)

def TEST_DPI_VW(v):
    return _pyxspcomm.TEST_DPI_VW(v)
IOType_Input = _pyxspcomm.IOType_Input
IOType_Output = _pyxspcomm.IOType_Output
IOType_InOut = _pyxspcomm.IOType_InOut
WriteMode_Imme = _pyxspcomm.WriteMode_Imme
WriteMode_Rise = _pyxspcomm.WriteMode_Rise
WriteMode_Fall = _pyxspcomm.WriteMode_Fall
class PinBind(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    write_fc = property(_pyxspcomm.PinBind_write_fc_get, _pyxspcomm.PinBind_write_fc_set)

    def __init__(self, *args):
        _pyxspcomm.PinBind_swiginit(self, _pyxspcomm.new_PinBind(*args))

    def Set(self, *args):
        return _pyxspcomm.PinBind_Set(self, *args)

    def Get(self):
        return _pyxspcomm.PinBind_Get(self)

    def AsInt32(self):
        return _pyxspcomm.PinBind_AsInt32(self)

    def AsString(self):
        return _pyxspcomm.PinBind_AsString(self)
    __swig_destroy__ = _pyxspcomm.delete_PinBind

# Register PinBind in _pyxspcomm:
_pyxspcomm.PinBind_swigregister(PinBind)
VPI_XDATA_AUTOCHECK = _pyxspcomm.VPI_XDATA_AUTOCHECK
VPI_XDATA_SCALAR = _pyxspcomm.VPI_XDATA_SCALAR
VPI_XDATA_INTEGER = _pyxspcomm.VPI_XDATA_INTEGER
VPI_XDATA_VECTOR = _pyxspcomm.VPI_XDATA_VECTOR
class XDataCallBack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    desc = property(_pyxspcomm.XDataCallBack_desc_get, _pyxspcomm.XDataCallBack_desc_set)
    fc = property(_pyxspcomm.XDataCallBack_fc_get, _pyxspcomm.XDataCallBack_fc_set)
    args = property(_pyxspcomm.XDataCallBack_args_get, _pyxspcomm.XDataCallBack_args_set)

    def __init__(self):
        _pyxspcomm.XDataCallBack_swiginit(self, _pyxspcomm.new_XDataCallBack())
    __swig_destroy__ = _pyxspcomm.delete_XDataCallBack

# Register XDataCallBack in _pyxspcomm:
_pyxspcomm.XDataCallBack_swigregister(XDataCallBack)
class XData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    In = _pyxspcomm.XData_In
    Out = _pyxspcomm.XData_Out
    InOut = _pyxspcomm.XData_InOut
    Imme = _pyxspcomm.XData_Imme
    Rise = _pyxspcomm.XData_Rise
    Fall = _pyxspcomm.XData_Fall
    value = property(_pyxspcomm.XData_value_get, _pyxspcomm.XData_value_set)
    mName = property(_pyxspcomm.XData_mName_get, _pyxspcomm.XData_mName_set)
    mIOType = property(_pyxspcomm.XData_mIOType_get, _pyxspcomm.XData_mIOType_set)
    mWidth = property(_pyxspcomm.XData_mWidth_get, _pyxspcomm.XData_mWidth_set)
    pVecData = property(_pyxspcomm.XData_pVecData_get, _pyxspcomm.XData_pVecData_set)
    mLogicData = property(_pyxspcomm.XData_mLogicData_get, _pyxspcomm.XData_mLogicData_set)

    def __init__(self, *args):
        _pyxspcomm.XData_swiginit(self, _pyxspcomm.new_XData(*args))
    __swig_destroy__ = _pyxspcomm.delete_XData

    def ReInit(self, *args):
        return _pyxspcomm.XData_ReInit(self, *args)

    def SubDataRef(self, *args):
        return _pyxspcomm.XData_SubDataRef(self, *args)

    def GetWriteMode(self):
        return _pyxspcomm.XData_GetWriteMode(self)

    def SetWriteMode(self, mode):
        return _pyxspcomm.XData_SetWriteMode(self, mode)

    def DataValid(self):
        return _pyxspcomm.XData_DataValid(self)

    def BindDPIPtr(self, read_ptr, write_ptr):
        return _pyxspcomm.XData_BindDPIPtr(self, read_ptr, write_ptr)

    def BindDPIRW(self, *args):
        return _pyxspcomm.XData_BindDPIRW(self, *args)

    def BindNativeData(self, pdata):
        return _pyxspcomm.XData_BindNativeData(self, pdata)

    def BindVPI(self, *args):
        return _pyxspcomm.XData_BindVPI(self, *args)

    @staticmethod
    def FromVPI(*args):
        return _pyxspcomm.XData_FromVPI(*args)

    def IsVPIBinded(self):
        return _pyxspcomm.XData_IsVPIBinded(self)

    def W(self):
        return _pyxspcomm.XData_W(self)

    def U(self):
        return _pyxspcomm.XData_U(self)

    def S(self):
        return _pyxspcomm.XData_S(self)

    def B(self):
        return _pyxspcomm.XData_B(self)

    def String(self):
        return _pyxspcomm.XData_String(self)

    def Connect(self, xdata):
        return _pyxspcomm.XData_Connect(self, xdata)

    def Equal(self, xdata):
        return _pyxspcomm.XData_Equal(self, xdata)

    def Set(self, *args):
        return _pyxspcomm.XData_Set(self, *args)

    def GetBytes(self):
        return _pyxspcomm.XData_GetBytes(self)

    def SetBytes(self, buffer):
        return _pyxspcomm.XData_SetBytes(self, buffer)

    def IsInIO(self):
        return _pyxspcomm.XData_IsInIO(self)

    def IsOutIO(self):
        return _pyxspcomm.XData_IsOutIO(self)

    def IsBiIO(self):
        return _pyxspcomm.XData_IsBiIO(self)

    def IsImmWrite(self):
        return _pyxspcomm.XData_IsImmWrite(self)

    def IsRiseWrite(self):
        return _pyxspcomm.XData_IsRiseWrite(self)

    def IsFallWrite(self):
        return _pyxspcomm.XData_IsFallWrite(self)

    def AsImmWrite(self):
        return _pyxspcomm.XData_AsImmWrite(self)

    def AsRiseWrite(self):
        return _pyxspcomm.XData_AsRiseWrite(self)

    def AsFallWrite(self):
        return _pyxspcomm.XData_AsFallWrite(self)

    def AsVPIWriteNoDelay(self):
        return _pyxspcomm.XData_AsVPIWriteNoDelay(self)

    def AsVPIWriteForce(self):
        return _pyxspcomm.XData_AsVPIWriteForce(self)

    def AsVPIWriteRelease(self):
        return _pyxspcomm.XData_AsVPIWriteRelease(self)

    def AsBiIO(self):
        return _pyxspcomm.XData_AsBiIO(self)

    def AsInIO(self):
        return _pyxspcomm.XData_AsInIO(self)

    def AsOutIO(self):
        return _pyxspcomm.XData_AsOutIO(self)

    def FlipIOType(self):
        return _pyxspcomm.XData_FlipIOType(self)

    def Invert(self):
        return _pyxspcomm.XData_Invert(self)

    def At(self, index):
        return _pyxspcomm.XData_At(self, index)

    def AsBinaryString(self):
        return _pyxspcomm.XData_AsBinaryString(self)

    def CSelf(self):
        return _pyxspcomm.XData_CSelf(self)

    def SetVPIWriteFlag(self, flag):
        return _pyxspcomm.XData_SetVPIWriteFlag(self, flag)

    def AsVPIAuto(self):
        return _pyxspcomm.XData_AsVPIAuto(self)

    def AsVPIScale(self):
        return _pyxspcomm.XData_AsVPIScale(self)

    def AsVPIInt(self):
        return _pyxspcomm.XData_AsVPIInt(self)

    def AsVPIVector(self):
        return _pyxspcomm.XData_AsVPIVector(self)

    def SubDataRefRaw(self, *args):
        return _pyxspcomm.XData_SubDataRefRaw(self, *args)

    def AsInt64(self):
        return _pyxspcomm.XData_AsInt64(self)

    def AsInt32(self):
        return _pyxspcomm.XData_AsInt32(self)

    def SetVU8(self, buffer):
        return _pyxspcomm.XData_SetVU8(self, buffer)

    def GetVU8(self):
        return _pyxspcomm.XData_GetVU8(self)

    def WriteOnRise(self):
        return _pyxspcomm.XData_WriteOnRise(self)

    def WriteOnFall(self):
        return _pyxspcomm.XData_WriteOnFall(self)

    def WriteDirect(self):
        return _pyxspcomm.XData_WriteDirect(self)

    def SetIgnoreSameDataWrite(self, w):
        return _pyxspcomm.XData_SetIgnoreSameDataWrite(self, w)

    def _TestBindDPIL(self):
        return _pyxspcomm.XData__TestBindDPIL(self)

    def _TestBindDPIV(self):
        return _pyxspcomm.XData__TestBindDPIV(self)

    def SetBits(self, *args):
        return _pyxspcomm.XData_SetBits(self, *args)

    def GetBits(self, *args):
        return _pyxspcomm.XData_GetBits(self, *args)

    def OnChange(self, *args):
        return _pyxspcomm.XData_OnChange(self, *args)

    def ClearOnChangeCbs(self):
        return _pyxspcomm.XData_ClearOnChangeCbs(self)

    def HasOnChangeCbs(self):
        return _pyxspcomm.XData_HasOnChangeCbs(self)

    def ReadFresh(self, m):
        return _pyxspcomm.XData_ReadFresh(self, m)

    def Comp(self, data, opcode, eq=0):
        return _pyxspcomm.XData_Comp(self, data, opcode, eq)

    def __gt__(self, data):
        return _pyxspcomm.XData___gt__(self, data)

    def __lt__(self, data):
        return _pyxspcomm.XData___lt__(self, data)

    def __ge__(self, data):
        return _pyxspcomm.XData___ge__(self, data)

    def __le__(self, data):
        return _pyxspcomm.XData___le__(self, data)

    def __eq__(self, *args):
        return _pyxspcomm.XData___eq__(self, *args)

# Register XData in _pyxspcomm:
_pyxspcomm.XData_swigregister(XData)
class XPort(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    prefix = property(_pyxspcomm.XPort_prefix_get, _pyxspcomm.XPort_prefix_set)
    port_list = property(_pyxspcomm.XPort_port_list_get, _pyxspcomm.XPort_port_list_set)

    def __init__(self, *args):
        _pyxspcomm.XPort_swiginit(self, _pyxspcomm.new_XPort(*args))

    def PortCount(self):
        return _pyxspcomm.XPort_PortCount(self)

    def Add(self, pin, pin_data):
        return _pyxspcomm.XPort_Add(self, pin, pin_data)

    def Del(self, pin):
        return _pyxspcomm.XPort_Del(self, pin)

    def Connect(self, target):
        return _pyxspcomm.XPort_Connect(self, target)

    def NewSubPort(self, subprefix):
        return _pyxspcomm.XPort_NewSubPort(self, subprefix)

    def SelectPins(self, pins):
        return _pyxspcomm.XPort_SelectPins(self, pins)

    def Get(self, key, raw_key=False):
        return _pyxspcomm.XPort_Get(self, key, raw_key)

    def FlipIOType(self):
        return _pyxspcomm.XPort_FlipIOType(self)

    def AsBiIO(self):
        return _pyxspcomm.XPort_AsBiIO(self)

    def WriteOnRise(self):
        return _pyxspcomm.XPort_WriteOnRise(self)

    def WriteOnFall(self):
        return _pyxspcomm.XPort_WriteOnFall(self)

    def ReadFresh(self, m):
        return _pyxspcomm.XPort_ReadFresh(self, m)

    def SetZero(self):
        return _pyxspcomm.XPort_SetZero(self)

    def String(self, *args):
        return _pyxspcomm.XPort_String(self, *args)

    def GetPrefix(self):
        return _pyxspcomm.XPort_GetPrefix(self)

    def GetKeys(self, raw_key=False):
        return _pyxspcomm.XPort_GetKeys(self, raw_key)

    def AsImmWrite(self):
        return _pyxspcomm.XPort_AsImmWrite(self)

    def AsRiseWrite(self):
        return _pyxspcomm.XPort_AsRiseWrite(self)

    def AsFallWrite(self):
        return _pyxspcomm.XPort_AsFallWrite(self)

    def CSelf(self):
        return _pyxspcomm.XPort_CSelf(self)
    __swig_destroy__ = _pyxspcomm.delete_XPort

# Register XPort in _pyxspcomm:
_pyxspcomm.XPort_swigregister(XPort)

def Traceback(*args):
    return _pyxspcomm.Traceback(*args)

def uTime():
    return _pyxspcomm.uTime()

def fmtTime(*args):
    return _pyxspcomm.fmtTime(*args)

def fmtNow(*args):
    return _pyxspcomm.fmtNow(*args)
LogLevel_debug = _pyxspcomm.LogLevel_debug
LogLevel_info = _pyxspcomm.LogLevel_info
LogLevel_warning = _pyxspcomm.LogLevel_warning
LogLevel_error = _pyxspcomm.LogLevel_error
LogLevel_fatal = _pyxspcomm.LogLevel_fatal

def get_log_level():
    return _pyxspcomm.get_log_level()

def set_log_level(val):
    return _pyxspcomm.set_log_level(val)

def version():
    return _pyxspcomm.version()

def sArrayHex(buff, size):
    return _pyxspcomm.sArrayHex(buff, size)

def sWith(str, prefix):
    return _pyxspcomm.sWith(str, prefix)

def sLower(input):
    return _pyxspcomm.sLower(input)

def FmtSize(s):
    return _pyxspcomm.FmtSize(s)

def xRandom(a, b):
    return _pyxspcomm.xRandom(a, b)

def XSeed(seed):
    return _pyxspcomm.XSeed(seed)

def checkVersion():
    return _pyxspcomm.checkVersion()

def removeSuffix(str, suffix):
    return _pyxspcomm.removeSuffix(str, suffix)

def big_shift(a, size, shift):
    return _pyxspcomm.big_shift(a, size, shift)

def big_binstr(a, size):
    return _pyxspcomm.big_binstr(a, size)

def big_mask(a, size, bit_start, bit_end):
    return _pyxspcomm.big_mask(a, size, bit_start, bit_end)

def sync_data_to(input_data, size, mask, output_data):
    return _pyxspcomm.sync_data_to(input_data, size, mask, output_data)

def fileExists(fileName):
    return _pyxspcomm.fileExists(fileName)
class s_xsignal_cfg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    offset = property(_pyxspcomm.s_xsignal_cfg_offset_get, _pyxspcomm.s_xsignal_cfg_offset_set)
    mem_bytes = property(_pyxspcomm.s_xsignal_cfg_mem_bytes_get, _pyxspcomm.s_xsignal_cfg_mem_bytes_set)
    rtl_width = property(_pyxspcomm.s_xsignal_cfg_rtl_width_get, _pyxspcomm.s_xsignal_cfg_rtl_width_set)
    array_size = property(_pyxspcomm.s_xsignal_cfg_array_size_get, _pyxspcomm.s_xsignal_cfg_array_size_set)
    is_empty = property(_pyxspcomm.s_xsignal_cfg_is_empty_get, _pyxspcomm.s_xsignal_cfg_is_empty_set)
    type = property(_pyxspcomm.s_xsignal_cfg_type_get, _pyxspcomm.s_xsignal_cfg_type_set)

    def __init__(self):
        _pyxspcomm.s_xsignal_cfg_swiginit(self, _pyxspcomm.new_s_xsignal_cfg())
    __swig_destroy__ = _pyxspcomm.delete_s_xsignal_cfg

# Register s_xsignal_cfg in _pyxspcomm:
_pyxspcomm.s_xsignal_cfg_swigregister(s_xsignal_cfg)
class XSignalCFG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cfg_data = property(_pyxspcomm.XSignalCFG_cfg_data_get, _pyxspcomm.XSignalCFG_cfg_data_set)
    cfg_base_address = property(_pyxspcomm.XSignalCFG_cfg_base_address_get, _pyxspcomm.XSignalCFG_cfg_base_address_set)

    def __init__(self, path_or_str_data, base_address=0):
        _pyxspcomm.XSignalCFG_swiginit(self, _pyxspcomm.new_XSignalCFG(path_or_str_data, base_address))

    def NewXData(self, *args):
        return _pyxspcomm.XSignalCFG_NewXData(self, *args)

    def NewXDataArray(self, *args):
        return _pyxspcomm.XSignalCFG_NewXDataArray(self, *args)

    def GetSignalNames(self, *args):
        return _pyxspcomm.XSignalCFG_GetSignalNames(self, *args)

    def At(self, name):
        return _pyxspcomm.XSignalCFG_At(self, name)

    def String(self):
        return _pyxspcomm.XSignalCFG_String(self)
    __swig_destroy__ = _pyxspcomm.delete_XSignalCFG

# Register XSignalCFG in _pyxspcomm:
_pyxspcomm.XSignalCFG_swigregister(XSignalCFG)
class ComUseStepCb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cycle = property(_pyxspcomm.ComUseStepCb_cycle_get, _pyxspcomm.ComUseStepCb_cycle_set)

    def __init__(self):
        _pyxspcomm.ComUseStepCb_swiginit(self, _pyxspcomm.new_ComUseStepCb())

    @staticmethod
    def GetCb():
        return _pyxspcomm.ComUseStepCb_GetCb()

    def CSelf(self):
        return _pyxspcomm.ComUseStepCb_CSelf(self)

    @staticmethod
    def Cb(c, _self):
        return _pyxspcomm.ComUseStepCb_Cb(c, _self)

    def Call(self):
        return _pyxspcomm.ComUseStepCb_Call(self)
    __swig_destroy__ = _pyxspcomm.delete_ComUseStepCb

# Register ComUseStepCb in _pyxspcomm:
_pyxspcomm.ComUseStepCb_swigregister(ComUseStepCb)
class ComUseEcho(ComUseStepCb):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stderr_echo = property(_pyxspcomm.ComUseEcho_stderr_echo_get, _pyxspcomm.ComUseEcho_stderr_echo_set)
    valid = property(_pyxspcomm.ComUseEcho_valid_get, _pyxspcomm.ComUseEcho_valid_set)
    data = property(_pyxspcomm.ComUseEcho_data_get, _pyxspcomm.ComUseEcho_data_set)
    fmt = property(_pyxspcomm.ComUseEcho_fmt_get, _pyxspcomm.ComUseEcho_fmt_set)
    convert = property(_pyxspcomm.ComUseEcho_convert_get, _pyxspcomm.ComUseEcho_convert_set)

    def __init__(self, *args):
        _pyxspcomm.ComUseEcho_swiginit(self, _pyxspcomm.new_ComUseEcho(*args))

    def Call(self):
        return _pyxspcomm.ComUseEcho_Call(self)
    __swig_destroy__ = _pyxspcomm.delete_ComUseEcho

# Register ComUseEcho in _pyxspcomm:
_pyxspcomm.ComUseEcho_swigregister(ComUseEcho)

def GetFromU64Array(*args):
    return _pyxspcomm.GetFromU64Array(*args)

def GetFromU32Array(*args):
    return _pyxspcomm.GetFromU32Array(*args)

def GetFromU8Array(*args):
    return _pyxspcomm.GetFromU8Array(*args)

def SetU64Array(*args):
    return _pyxspcomm.SetU64Array(*args)

def SetU32Array(*args):
    return _pyxspcomm.SetU32Array(*args)

def SetU8Array(*args):
    return _pyxspcomm.SetU8Array(*args)

def U64PtrAsU64(p):
    return _pyxspcomm.U64PtrAsU64(p)

def U32PtrAsU64(p):
    return _pyxspcomm.U32PtrAsU64(p)

def U8PtrAsU64(p):
    return _pyxspcomm.U8PtrAsU64(p)

def U64AsU64Ptr(p):
    return _pyxspcomm.U64AsU64Ptr(p)

def U64AsU32Ptr(p):
    return _pyxspcomm.U64AsU32Ptr(p)

def U64AsU8Ptr(p):
    return _pyxspcomm.U64AsU8Ptr(p)
ComUseCondCmp_EQ = _pyxspcomm.ComUseCondCmp_EQ
ComUseCondCmp_NE = _pyxspcomm.ComUseCondCmp_NE
ComUseCondCmp_GT = _pyxspcomm.ComUseCondCmp_GT
ComUseCondCmp_GE = _pyxspcomm.ComUseCondCmp_GE
ComUseCondCmp_LT = _pyxspcomm.ComUseCondCmp_LT
ComUseCondCmp_LE = _pyxspcomm.ComUseCondCmp_LE
class ComUseCondCheck(ComUseStepCb):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, clk=None):
        _pyxspcomm.ComUseCondCheck_swiginit(self, _pyxspcomm.new_ComUseCondCheck(clk))

    def BindXClock(self, clk):
        return _pyxspcomm.ComUseCondCheck_BindXClock(self, clk)

    def SetCondition(self, *args):
        return _pyxspcomm.ComUseCondCheck_SetCondition(self, *args)

    def RemoveCondition(self, unique_name):
        return _pyxspcomm.ComUseCondCheck_RemoveCondition(self, unique_name)

    def ListCondition(self):
        return _pyxspcomm.ComUseCondCheck_ListCondition(self)

    def GetTriggeredConditionKeys(self):
        return _pyxspcomm.ComUseCondCheck_GetTriggeredConditionKeys(self)

    def ClearClock(self):
        return _pyxspcomm.ComUseCondCheck_ClearClock(self)

    def ClearCondition(self):
        return _pyxspcomm.ComUseCondCheck_ClearCondition(self)

    def ClearAll(self):
        return _pyxspcomm.ComUseCondCheck_ClearAll(self)

    def Call(self):
        return _pyxspcomm.ComUseCondCheck_Call(self)
    __swig_destroy__ = _pyxspcomm.delete_ComUseCondCheck

# Register ComUseCondCheck in _pyxspcomm:
_pyxspcomm.ComUseCondCheck_swigregister(ComUseCondCheck)
class ComUseDataArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyxspcomm.ComUseDataArray_swiginit(self, _pyxspcomm.new_ComUseDataArray(*args))
    __swig_destroy__ = _pyxspcomm.delete_ComUseDataArray

    def __eq__(self, t):
        return _pyxspcomm.ComUseDataArray___eq__(self, t)

    def Copy(self):
        return _pyxspcomm.ComUseDataArray_Copy(self)

    def SyncFrom(self, addr, size):
        return _pyxspcomm.ComUseDataArray_SyncFrom(self, addr, size)

    def SyncTo(self, addr, size):
        return _pyxspcomm.ComUseDataArray_SyncTo(self, addr, size)

    def SetZero(self):
        return _pyxspcomm.ComUseDataArray_SetZero(self)

    def BaseAddr(self):
        return _pyxspcomm.ComUseDataArray_BaseAddr(self)

    def Size(self):
        return _pyxspcomm.ComUseDataArray_Size(self)

    def AsBytes(self):
        return _pyxspcomm.ComUseDataArray_AsBytes(self)

    def FromBytes(self, input):
        return _pyxspcomm.ComUseDataArray_FromBytes(self, input)

# Register ComUseDataArray in _pyxspcomm:
_pyxspcomm.ComUseDataArray_swigregister(ComUseDataArray)
_TEST_DPI_LR = _pyxspcomm._TEST_DPI_LR
_TEST_DPI_LW = _pyxspcomm._TEST_DPI_LW
_TEST_DPI_VR = _pyxspcomm._TEST_DPI_VR
_TEST_DPI_VW = _pyxspcomm._TEST_DPI_VW
class cb_void_bool_XDatap_u43_voidp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_force_callable(self):
        return _pyxspcomm.cb_void_bool_XDatap_u43_voidp_set_force_callable(self)

    def __init__(self):
        if self.__class__ == cb_void_bool_XDatap_u43_voidp:
            _self = None
        else:
            _self = self
        _pyxspcomm.cb_void_bool_XDatap_u43_voidp_swiginit(self, _pyxspcomm.new_cb_void_bool_XDatap_u43_voidp(_self, ))
    __swig_destroy__ = _pyxspcomm.delete_cb_void_bool_XDatap_u43_voidp

    def call(self, __args1, __args2, __args3, __args4):
        return _pyxspcomm.cb_void_bool_XDatap_u43_voidp_call(self, __args1, __args2, __args3, __args4)

    def _xfunction(self, cb):
        return _pyxspcomm.cb_void_bool_XDatap_u43_voidp__xfunction(self, cb)

    def __eq__(self, n):
        return _pyxspcomm.cb_void_bool_XDatap_u43_voidp___eq__(self, n)

    def __ne__(self, n):
        return _pyxspcomm.cb_void_bool_XDatap_u43_voidp___ne__(self, n)
    def __disown__(self):
        self.this.disown()
        _pyxspcomm.disown_cb_void_bool_XDatap_u43_voidp(self)
        return weakref.proxy(self)

# Register cb_void_bool_XDatap_u43_voidp in _pyxspcomm:
_pyxspcomm.cb_void_bool_XDatap_u43_voidp_swigregister(cb_void_bool_XDatap_u43_voidp)
class cb_void_xsvLogicp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_force_callable(self):
        return _pyxspcomm.cb_void_xsvLogicp_set_force_callable(self)

    def __init__(self):
        if self.__class__ == cb_void_xsvLogicp:
            _self = None
        else:
            _self = self
        _pyxspcomm.cb_void_xsvLogicp_swiginit(self, _pyxspcomm.new_cb_void_xsvLogicp(_self, ))
    __swig_destroy__ = _pyxspcomm.delete_cb_void_xsvLogicp

    def call(self, __args1):
        return _pyxspcomm.cb_void_xsvLogicp_call(self, __args1)

    def _xfunction(self, cb):
        return _pyxspcomm.cb_void_xsvLogicp__xfunction(self, cb)

    def __eq__(self, n):
        return _pyxspcomm.cb_void_xsvLogicp___eq__(self, n)

    def __ne__(self, n):
        return _pyxspcomm.cb_void_xsvLogicp___ne__(self, n)
    def __disown__(self):
        self.this.disown()
        _pyxspcomm.disown_cb_void_xsvLogicp(self)
        return weakref.proxy(self)

# Register cb_void_xsvLogicp in _pyxspcomm:
_pyxspcomm.cb_void_xsvLogicp_swigregister(cb_void_xsvLogicp)
class cb_void_xsvLogic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_force_callable(self):
        return _pyxspcomm.cb_void_xsvLogic_set_force_callable(self)

    def __init__(self):
        if self.__class__ == cb_void_xsvLogic:
            _self = None
        else:
            _self = self
        _pyxspcomm.cb_void_xsvLogic_swiginit(self, _pyxspcomm.new_cb_void_xsvLogic(_self, ))
    __swig_destroy__ = _pyxspcomm.delete_cb_void_xsvLogic

    def call(self, __args1):
        return _pyxspcomm.cb_void_xsvLogic_call(self, __args1)

    def _xfunction(self, cb):
        return _pyxspcomm.cb_void_xsvLogic__xfunction(self, cb)

    def __eq__(self, n):
        return _pyxspcomm.cb_void_xsvLogic___eq__(self, n)

    def __ne__(self, n):
        return _pyxspcomm.cb_void_xsvLogic___ne__(self, n)
    def __disown__(self):
        self.this.disown()
        _pyxspcomm.disown_cb_void_xsvLogic(self)
        return weakref.proxy(self)

# Register cb_void_xsvLogic in _pyxspcomm:
_pyxspcomm.cb_void_xsvLogic_swigregister(cb_void_xsvLogic)
class cb_void_xsvlogicVecValp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_force_callable(self):
        return _pyxspcomm.cb_void_xsvlogicVecValp_set_force_callable(self)

    def __init__(self):
        if self.__class__ == cb_void_xsvlogicVecValp:
            _self = None
        else:
            _self = self
        _pyxspcomm.cb_void_xsvlogicVecValp_swiginit(self, _pyxspcomm.new_cb_void_xsvlogicVecValp(_self, ))
    __swig_destroy__ = _pyxspcomm.delete_cb_void_xsvlogicVecValp

    def call(self, __args1):
        return _pyxspcomm.cb_void_xsvlogicVecValp_call(self, __args1)

    def _xfunction(self, cb):
        return _pyxspcomm.cb_void_xsvlogicVecValp__xfunction(self, cb)

    def __eq__(self, n):
        return _pyxspcomm.cb_void_xsvlogicVecValp___eq__(self, n)

    def __ne__(self, n):
        return _pyxspcomm.cb_void_xsvlogicVecValp___ne__(self, n)
    def __disown__(self):
        self.this.disown()
        _pyxspcomm.disown_cb_void_xsvlogicVecValp(self)
        return weakref.proxy(self)

# Register cb_void_xsvlogicVecValp in _pyxspcomm:
_pyxspcomm.cb_void_xsvlogicVecValp_swigregister(cb_void_xsvlogicVecValp)
class cb_int_bool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_force_callable(self):
        return _pyxspcomm.cb_int_bool_set_force_callable(self)

    def __init__(self):
        if self.__class__ == cb_int_bool:
            _self = None
        else:
            _self = self
        _pyxspcomm.cb_int_bool_swiginit(self, _pyxspcomm.new_cb_int_bool(_self, ))
    __swig_destroy__ = _pyxspcomm.delete_cb_int_bool

    def call(self, __args1):
        return _pyxspcomm.cb_int_bool_call(self, __args1)

    def _xfunction(self, cb):
        return _pyxspcomm.cb_int_bool__xfunction(self, cb)

    def __eq__(self, n):
        return _pyxspcomm.cb_int_bool___eq__(self, n)

    def __ne__(self, n):
        return _pyxspcomm.cb_int_bool___ne__(self, n)
    def __disown__(self):
        self.this.disown()
        _pyxspcomm.disown_cb_int_bool(self)
        return weakref.proxy(self)

# Register cb_int_bool in _pyxspcomm:
_pyxspcomm.cb_int_bool_swigregister(cb_int_bool)
class cb_void_u64_voidp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_force_callable(self):
        return _pyxspcomm.cb_void_u64_voidp_set_force_callable(self)

    def __init__(self):
        if self.__class__ == cb_void_u64_voidp:
            _self = None
        else:
            _self = self
        _pyxspcomm.cb_void_u64_voidp_swiginit(self, _pyxspcomm.new_cb_void_u64_voidp(_self, ))
    __swig_destroy__ = _pyxspcomm.delete_cb_void_u64_voidp

    def call(self, __args1, __args2):
        return _pyxspcomm.cb_void_u64_voidp_call(self, __args1, __args2)

    def _xfunction(self, cb):
        return _pyxspcomm.cb_void_u64_voidp__xfunction(self, cb)

    def __eq__(self, n):
        return _pyxspcomm.cb_void_u64_voidp___eq__(self, n)

    def __ne__(self, n):
        return _pyxspcomm.cb_void_u64_voidp___ne__(self, n)
    def __disown__(self):
        self.this.disown()
        _pyxspcomm.disown_cb_void_u64_voidp(self)
        return weakref.proxy(self)

# Register cb_void_u64_voidp in _pyxspcomm:
_pyxspcomm.cb_void_u64_voidp_swigregister(cb_void_u64_voidp)
class cb_bool_XData_XData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_force_callable(self):
        return _pyxspcomm.cb_bool_XData_XData_set_force_callable(self)

    def __init__(self):
        if self.__class__ == cb_bool_XData_XData:
            _self = None
        else:
            _self = self
        _pyxspcomm.cb_bool_XData_XData_swiginit(self, _pyxspcomm.new_cb_bool_XData_XData(_self, ))
    __swig_destroy__ = _pyxspcomm.delete_cb_bool_XData_XData

    def call(self, __args1, __args2):
        return _pyxspcomm.cb_bool_XData_XData_call(self, __args1, __args2)

    def _xfunction(self, cb):
        return _pyxspcomm.cb_bool_XData_XData__xfunction(self, cb)

    def __eq__(self, n):
        return _pyxspcomm.cb_bool_XData_XData___eq__(self, n)

    def __ne__(self, n):
        return _pyxspcomm.cb_bool_XData_XData___ne__(self, n)
    def __disown__(self):
        self.this.disown()
        _pyxspcomm.disown_cb_bool_XData_XData(self)
        return weakref.proxy(self)

# Register cb_bool_XData_XData in _pyxspcomm:
_pyxspcomm.cb_bool_XData_XData_swigregister(cb_bool_XData_XData)
class cb_bool_uint64_uint64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_force_callable(self):
        return _pyxspcomm.cb_bool_uint64_uint64_set_force_callable(self)

    def __init__(self):
        if self.__class__ == cb_bool_uint64_uint64:
            _self = None
        else:
            _self = self
        _pyxspcomm.cb_bool_uint64_uint64_swiginit(self, _pyxspcomm.new_cb_bool_uint64_uint64(_self, ))
    __swig_destroy__ = _pyxspcomm.delete_cb_bool_uint64_uint64

    def call(self, __args1, __args2):
        return _pyxspcomm.cb_bool_uint64_uint64_call(self, __args1, __args2)

    def _xfunction(self, cb):
        return _pyxspcomm.cb_bool_uint64_uint64__xfunction(self, cb)

    def __eq__(self, n):
        return _pyxspcomm.cb_bool_uint64_uint64___eq__(self, n)

    def __ne__(self, n):
        return _pyxspcomm.cb_bool_uint64_uint64___ne__(self, n)
    def __disown__(self):
        self.this.disown()
        _pyxspcomm.disown_cb_bool_uint64_uint64(self)
        return weakref.proxy(self)

# Register cb_bool_uint64_uint64 in _pyxspcomm:
_pyxspcomm.cb_bool_uint64_uint64_swigregister(cb_bool_uint64_uint64)
DPI_TEST_LR = _pyxspcomm.DPI_TEST_LR
DPI_TEST_LW = _pyxspcomm.DPI_TEST_LW
DPI_TEST_VR = _pyxspcomm.DPI_TEST_VR
DPI_TEST_VW = _pyxspcomm.DPI_TEST_VW

# PYTHON code


