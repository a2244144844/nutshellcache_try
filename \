"""
    A simple reference cache model
    Author: zzy
"""
from env.simplebus_agents import *
from utils import *
import logging
import random
from .CDTable import *


class CacheRefModel(Model):
    def __init__(self, num_sets, num_ways, block_size_bytes, address_bits=32):
        self.gold_mem = SimpleMem()
        self.cd_table = CDTable(num_sets, num_ways, block_size_bytes, address_bits)
        
        # 用于暂存预期的CPU响应，以便monitor_hook可以访问
        self._expected_cpu_rdata = None
        self._expected_cpu_user = None
        self._expecting_cpu_response = False

        # 用于记录预期的写回，以便与memory_agent的monitor比较
        self._pending_expected_write_backs = {} # addr -> data_block

    def reset(self):
        self.gold_mem.reset()
        self.cd_table.reset()
        self._expected_cpu_rdata = None
        self._expected_cpu_user = None
        self._expecting_cpu_response = False
        self._pending_expected_write_backs.clear()


    @driver_hook(agent_name="in_agent")
    def read(self, addr, size, user=0):
        tag_from_addr, set_index, word_idx_in_blk, byte_offset_in_word, block_start_addr = self.cd_table._decode_address(addr)
        is_hit, way_idx, _, _ = self.cd_table.find_line(addr)
        if is_hit:
            self._expected_cpu_rdata = self.cd_table.read_from_cache_line(addr) #直接返回读数据
        else: #miss
            victim_way_idx, evicted_info = self.cd_table.allocate_line(addr, [0]*64)
            if evicted_info:
                self._pending_expected_write_backs[evicted_info['block_addr']] = evicted_info['data_block']

            actual_fill_data_block = self.gold_mem.read_block(block_start_addr, self.cd_table.block_size_bytes)
            self.cd_table.table[set_index][victim_way_idx].data_block = actual_fill_data_block

            self._expected_cpu_rdata = self.cd_table.read_from_cache_line(addr)

        




#-----------------------------------------------------------------------#


class SimpleMem:
    def __init__(self, lbound=0x00000000, rbound=0xffffffff, default_value=0):
        self.mem = {}
        self.lbound = lbound
        self.rbound = rbound
        self.default_value = default_value

    def reset(self):
        self.mem.clear()

    def _check_bounds(self, addr):
        if not (self.lbound <= addr <= self.rbound):
            raise ValueError(f"[Memory-SIM]: Address 0x{addr:08x} is out of bounds.")

    def read_block(self, block_addr, block_size_bytes):
        """读取整个数据块 (例如 64 字节)"""
        self._check_bounds(block_addr)
        if block_addr % block_size_bytes != 0:
            raise ValueError(f"Block address 0x{block_addr:08x} is not aligned to block size {block_size_bytes}.")
        
        data_block = []
        # 假设我们按64位字(8字节)存储，一个64B的块包含8个64位字
        num_words_in_block = block_size_bytes // 8
        for i in range(num_words_in_block):
            word_addr = block_addr + i * 8
            data_block.append(self.mem.get(word_addr, self.default_value))
        return data_block # 返回一个包含多个64位字的列表

    def write_block(self, block_addr, data_block_words, block_size_bytes):
        """写入整个数据块"""
        self._check_bounds(block_addr)
        if block_addr % block_size_bytes != 0:
            raise ValueError(f"Block address 0x{block_addr:08x} is not aligned to block size {block_size_bytes}.")
        
        num_words_in_block = block_size_bytes // 8
        if len(data_block_words) != num_words_in_block:
            raise ValueError(f"Data block size mismatch. Expected {num_words_in_block} words, got {len(data_block_words)}.")

        for i in range(num_words_in_block):
            word_addr = block_addr + i * 8
            self.mem[word_addr] = data_block_words[i]

    # 为CPU请求的字节/字/半字级别读写保留原来的word64方法，
    # 但SimpleMem主要与Cache交互的是块级别
    def read_word64(self, word_addr):
        if word_addr % 8 != 0:
            raise ValueError(f"Address 0x{word_addr:08x} is not 64-bit aligned for word read.")
        self._check_bounds(word_addr)
        return self.mem.get(word_addr, self.default_value)

    def write_word64(self, word_addr, data64, byte_mask_8bit=0xFF):
        if word_addr % 8 != 0:
            raise ValueError(f"Address 0x{word_addr:08x} is not 64-bit aligned for word write.")
        self._check_bounds(word_addr)
        current_mem_data = self.mem.get(word_addr, self.default_value)
        final_data = 0
        for i in range(8):
            if (byte_mask_8bit >> i) & 0b1:
                byte_to_write = (data64 >> (i * 8)) & 0xFF
            else:
                byte_to_write = (current_mem_data >> (i * 8)) & 0xFF
            final_data |= (byte_to_write << (i * 8))
        self.mem[word_addr] = final_data
